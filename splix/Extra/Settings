    local settings_page = Window:Page({name = "configuration"})
    do
        local menu_section = settings_page:Section({name = "menu", side = "Left"})
        do
            menu_section:Keybind({pointer = "settings/menu/bind", name = "toggle", default = Enum.KeyCode.End, callback = function(p_state) Window.uibind = p_state end})
            menu_section:Toggle({pointer = "settings/menu/watermark", name = "watermark", callback = function(p_state) Window.watermark:Update("Visible", p_state) end})
            menu_section:Toggle({pointer = "settings/menu/keybind_list", name = "keybind list", callback = function(p_state) Window.keybindslist:Update("Visible", p_state) end})
        end
        local menu_theme = settings_page:Section({name = "theme", side = "Left"})
        do
            local themes = {Default = {accent = Color3.fromRGB(50, 43, 143),lightcontrast = Color3.fromRGB(32, 32, 32),darkcontrast = Color3.fromRGB(25, 25, 25),outline = Color3.fromRGB(0, 0, 0),inline = Color3.fromRGB(45, 45, 45),textcolor = Color3.fromRGB(255, 255, 255),textborder = Color3.fromRGB(0, 0, 0),riskytext = Color3.new(1, 1, 0.5),cursoroutline = Color3.fromRGB(10, 10, 10)},Nebula = {accent = Color3.fromRGB(192, 76, 255),lightcontrast = Color3.fromRGB(17, 19, 23),darkcontrast = Color3.fromRGB(15, 17, 19),outline = Color3.fromRGB(31, 29, 29),inline = Color3.fromRGB(0, 0, 0),textcolor = Color3.fromRGB(192, 192, 192),textborder = Color3.fromRGB(0, 0, 0),cursoroutline = Color3.fromRGB(10, 10, 10)},Neko = {accent = Color3.fromRGB(226, 30, 112),lightcontrast = Color3.fromRGB(18, 18, 18),darkcontrast = Color3.fromRGB(15, 15, 15),outline = Color3.fromRGB(0, 0, 0),inline = Color3.fromRGB(50, 50, 50),textcolor = Color3.fromRGB(255, 255, 255),textborder = Color3.fromRGB(0, 0, 0),riskytext = Color3.new(1, 1, 0.5),cursoroutline = Color3.fromRGB(10, 10, 10)},Spotify = {accent = Color3.fromRGB(77, 255, 138),lightcontrast = Color3.fromRGB(18, 18, 18),darkcontrast = Color3.fromRGB(15, 15, 15),outline = Color3.fromRGB(0, 0, 0),inline = Color3.fromRGB(50, 50, 50),textcolor = Color3.fromRGB(255, 255, 255),textborder = Color3.fromRGB(0, 0, 0),riskytext = Color3.new(1, 1, 0.5),cursoroutline = Color3.fromRGB(10, 10, 10)},Fatality = {accent = Color3.fromRGB(197, 7, 84),lightcontrast = Color3.fromRGB(30, 24, 66),darkcontrast = Color3.fromRGB(25, 19, 53),outline = Color3.fromRGB(0, 0, 0),inline = Color3.fromRGB(60, 53, 93),textcolor = Color3.fromRGB(255, 255, 255),textborder = Color3.fromRGB(0, 0, 0),riskytext = Color3.new(1, 1, 0.5),cursoroutline = Color3.fromRGB(10, 10, 10)},["Tokyo Night"] = {accent = Color3.fromRGB(103, 89, 179),lightcontrast = Color3.fromRGB(25, 25, 37),darkcontrast = Color3.fromRGB(22, 22, 31),outline = Color3.fromRGB(0, 0, 0),inline = Color3.fromRGB(50, 50, 50),textcolor = Color3.fromRGB(255, 255, 255),textborder = Color3.fromRGB(0, 0, 0),riskytext = Color3.new(1, 1, 0.5),cursoroutline = Color3.fromRGB(10, 10, 10)},["Kiriot Hub"] = {accent = Color3.fromRGB(255, 170, 0),lightcontrast = Color3.fromRGB(48, 51, 59),darkcontrast = Color3.fromRGB(26, 28, 32),outline = Color3.fromRGB(40, 40, 40),inline = Color3.fromRGB(0, 0, 0),textcolor = Color3.fromRGB(255, 255, 255),textborder = Color3.fromRGB(0, 0, 0),riskytext = Color3.new(1, 1, 0.5),cursoroutline = Color3.fromRGB(10, 10, 10)},Jester = {accent = Color3.fromRGB(219, 68, 103),lightcontrast = Color3.fromRGB(36, 36, 36),darkcontrast = Color3.fromRGB(28, 28, 28),outline = Color3.fromRGB(0, 0, 0),inline = Color3.fromRGB(55, 55, 55),textcolor = Color3.fromRGB(255, 255, 255),textborder = Color3.fromRGB(0, 0, 0),riskytext = Color3.new(1, 1, 0.5),cursoroutline = Color3.fromRGB(10, 10, 10)},Entrophy = {accent = Color3.fromRGB(143, 181, 214),lightcontrast = Color3.fromRGB(45, 44, 50),darkcontrast = Color3.fromRGB(37, 37, 42),outline = Color3.fromRGB(16, 16, 20),inline = Color3.fromRGB(68, 67, 76),textcolor = Color3.fromRGB(255, 255, 255),textborder = Color3.fromRGB(0, 0, 0),riskytext = Color3.new(1, 1, 0.5),cursoroutline = Color3.fromRGB(10, 10, 10)},Interwebz = {accent = Color3.fromRGB(247, 123, 101),lightcontrast = Color3.fromRGB(32, 25, 43),darkcontrast = Color3.fromRGB(25, 18, 34),outline = Color3.fromRGB(26, 20, 36),inline = Color3.fromRGB(48, 42, 57),textcolor = Color3.fromRGB(255, 255, 255),textborder = Color3.fromRGB(0, 0, 0),riskytext = Color3.new(1, 1, 0.5),cursoroutline = Color3.fromRGB(10, 10, 10)},Aimware = {accent = Color3.fromRGB(240, 72, 78),lightcontrast = Color3.fromRGB(31, 31, 31),darkcontrast = Color3.fromRGB(19, 19, 19),outline = Color3.fromRGB(0, 0, 0),inline = Color3.fromRGB(52, 51, 55),textcolor = Color3.fromRGB(255, 255, 255),textborder = Color3.fromRGB(0, 0, 0),riskytext = Color3.new(1, 1, 0.5),cursoroutline = Color3.fromRGB(10, 10, 10)},["Dark Lagoon"] = {accent = Color3.fromRGB(41, 92, 168),lightcontrast = Color3.fromRGB(38, 43, 60),darkcontrast = Color3.fromRGB(32, 35, 51),outline = Color3.fromRGB(0, 0, 0),inline = Color3.fromRGB(44, 54, 90),textcolor = Color3.fromRGB(255, 255, 255),textborder = Color3.fromRGB(0, 0, 0),riskytext = Color3.new(1, 1, 0.5),cursoroutline = Color3.fromRGB(10, 10, 10)},Onetap = {accent = Color3.fromRGB(255, 153, 54),lightcontrast = Color3.fromRGB(46, 46, 46),darkcontrast = Color3.fromRGB(30, 30, 30),outline = Color3.fromRGB(0, 0, 0),inline = Color3.fromRGB(67, 67, 67),textcolor = Color3.fromRGB(255, 255, 255),textborder = Color3.fromRGB(0, 0, 0),riskytext = Color3.new(1, 1, 0.5),cursoroutline = Color3.fromRGB(10, 10, 10)},Abyss = {accent = Color3.fromRGB(122, 130, 241),lightcontrast = Color3.fromRGB(32, 32, 32),darkcontrast = Color3.fromRGB(25, 25, 25),outline = Color3.fromRGB(0, 0, 0),inline = Color3.fromRGB(45, 45, 45),textcolor = Color3.fromRGB(255, 255, 255),textborder = Color3.fromRGB(0, 0, 0),riskytext = Color3.new(1, 1, 0.5),cursoroutline = Color3.fromRGB(10, 10, 10)},Vape = {accent = Color3.fromRGB(32, 110, 87),lightcontrast = Color3.fromRGB(32, 32, 32),darkcontrast = Color3.fromRGB(25, 25, 25),outline = Color3.fromRGB(0, 0, 0),inline = Color3.fromRGB(45, 45, 45),textcolor = Color3.fromRGB(255, 255, 255),textborder = Color3.fromRGB(0, 0, 0),riskytext = Color3.new(1, 1, 0.5),cursoroutline = Color3.fromRGB(10, 10, 10)},Gamesense = {accent = Color3.fromRGB(140, 181, 67),lightcontrast = Color3.fromRGB(23, 23, 23),darkcontrast = Color3.fromRGB(12, 12, 12),outline = Color3.fromRGB(0, 0, 0),inline = Color3.fromRGB(58, 60, 65),textcolor = Color3.fromRGB(255, 255, 255),textborder = Color3.fromRGB(0, 0, 0),riskytext = Color3.new(1, 1, 0.5),cursoroutline = Color3.fromRGB(10, 10, 10)},Neverlose = {accent = Color3.fromRGB(83, 198, 131),lightcontrast = Color3.fromRGB(0, 15, 30),darkcontrast = Color3.fromRGB(3, 4, 16),outline = Color3.fromRGB(0, 0, 0),inline = Color3.fromRGB(13, 24, 37),textcolor = Color3.fromRGB(255, 255, 255),textborder = Color3.fromRGB(0, 0, 0),riskytext = Color3.new(1, 1, 0.5),cursoroutline = Color3.fromRGB(10, 10, 10)},Primordial = {accent = Color3.fromRGB(194, 155, 165),lightcontrast = Color3.fromRGB(21, 21, 21),darkcontrast = Color3.fromRGB(31, 31, 31),outline = Color3.fromRGB(0, 0, 0),inline = Color3.fromRGB(67, 67, 67),textcolor = Color3.fromRGB(255, 255, 255),textborder = Color3.fromRGB(0, 0, 0),riskytext = Color3.new(1, 1, 0.5),cursoroutline = Color3.fromRGB(10, 10, 10)}}
            local themeStrings = {}
            for i, v in next, themes do
                table.insert(themeStrings, i)
            end
            menu_theme:Dropdown({pointer = "settings/menu/theme", name = "theme", options = themeStrings, default = "Default"})
            menu_theme:Button({name = "load", callback = function() local selected_theme = Library.pointers["settings/menu/theme"]:get() if selected_theme then Library.pointers["settings/menu/accent"]:set(themes[selected_theme].accent) Library.pointers["settings/menu/lightcontrast"]:set(themes[selected_theme].lightcontrast) Library.pointers["settings/menu/darkcontrast"]:set(themes[selected_theme].darkcontrast) Library.pointers["settings/menu/outline"]:set(themes[selected_theme].outline) Library.pointers["settings/menu/inline"]:set(themes[selected_theme].inline) Library.pointers["settings/menu/textcolor"]:set(themes[selected_theme].textcolor) Library.pointers["settings/menu/riskytextcolor"]:set(themes[selected_theme].riskytext) Library.pointers["settings/menu/textborder"]:set(themes[selected_theme].textborder) Library.pointers["settings/menu/cursoroutline"]:set(themes[selected_theme].cursoroutline) end end})
            menu_theme:Colorpicker({pointer = "settings/menu/accent", name = "accent", default = Color3.fromRGB(55, 175, 225), callback = function(p_state) Library:UpdateColor("Accent", p_state) end})
            menu_theme:Colorpicker({pointer = "settings/menu/lightcontrast", name = "light contrast", default = Color3.fromRGB(30, 30, 30), callback = function(p_state) Library:UpdateColor("LightContrast", p_state) end})
            menu_theme:Colorpicker({pointer = "settings/menu/darkcontrast", name = "dark contrast", default = Color3.fromRGB(25, 25, 25), callback = function(p_state) Library:UpdateColor("DarkContrast", p_state) end})
            menu_theme:Colorpicker({pointer = "settings/menu/outline", name = "outline", default = Color3.fromRGB(0, 0, 0), callback = function(p_state) Library:UpdateColor("Outline", p_state) end})
            menu_theme:Colorpicker({pointer = "settings/menu/inline", name = "inline", default = Color3.fromRGB(50, 50, 50), callback = function(p_state) Library:UpdateColor("Inline", p_state) end})
            menu_theme:Colorpicker({pointer = "settings/menu/textcolor", name = "text color", default = Color3.fromRGB(255, 255, 255), callback = function(p_state) Library:UpdateColor("TextColor", p_state) end})
            menu_theme:Colorpicker({pointer = "settings/menu/textborder", name = "text outline", default = Color3.fromRGB(0, 0, 0), callback = function(p_state) Library:UpdateColor("TextBorder", p_state) end})
            menu_theme:Colorpicker({pointer = "settings/menu/riskytextcolor", name = "risky text color", default = Color3.new(1, 1, 0.5), callback = function(p_state) Library:UpdateColor("riskytext", p_state) end})
            menu_theme:Colorpicker({pointer = "settings/menu/cursoroutline", name = "cursor outline", default = Color3.fromRGB(10, 10, 10), callback = function(p_state) Library:UpdateColor("CursorOutline", p_state) end})
            Library.pointers["settings/menu/accent"]:set(themes["Default"].accent)
            Library.pointers["settings/menu/lightcontrast"]:set(themes["Default"].lightcontrast)
            Library.pointers["settings/menu/darkcontrast"]:set(themes["Default"].darkcontrast)
            Library.pointers["settings/menu/outline"]:set(themes["Default"].outline)
            Library.pointers["settings/menu/inline"]:set(themes["Default"].inline)
            Library.pointers["settings/menu/textcolor"]:set(themes["Default"].textcolor)
            Library.pointers["settings/menu/riskytextcolor"]:set(themes["Default"].riskytext)
            Library.pointers["settings/menu/textborder"]:set(themes["Default"].textborder)
            Library.pointers["settings/menu/cursoroutline"]:set(themes["Default"].cursoroutline)
        end
        local config_section = settings_page:Section({name = "configuration", side = "Right"})
        do
            local current_list = {}
            local function update_config_list()
                local list = {}
                for idx, file in ipairs(listfiles("floyd/configs")) do
                    local file_name = file:gsub("floyd/configs\\", ""):gsub(".txt", "")
                    list[#list + 1] = file_name
                end
    
                local is_new = #list ~= #current_list
                if not is_new then
                    for idx, file in ipairs(list) do
                        if file ~= current_list[idx] then
                            is_new = true
                            break
                        end
                    end
                end
    
                if is_new then
                    current_list = list
                    Library.pointers["settings/configuration/list"]:UpdateList(list, false, true)
                end
            end
    
            config_section:Listbox({pointer = "settings/configuration/list"})
            config_section:Textbox({pointer = "settings/configuration/name", placeholder = "config name", text = "", middle = true, reset_on_focus = false })
            config_section:ButtonHolder({buttons = {{"create", function() local config_name = Library.pointers["settings/configuration/name"]:get() if config_name == "" or isfile("floyd/configs/" .. config_name .. ".txt") then return; end writefile("floyd/configs/" .. config_name .. ".txt", "") update_config_list() end}, {"delete", function() local selected_config = Library.pointers["settings/configuration/list"]:get()[1][1] if selected_config then delfile("floyd/configs/" .. selected_config .. ".txt") update_config_list() end end}}})
            config_section:ButtonHolder({buttons = {{"load", function() local selected_config = Library.pointers["settings/configuration/list"]:get()[1][1] if selected_config then Window:LoadConfig(readfile("floyd/configs/" .. selected_config .. ".txt")) end end}, {"save", function() local selected_config = Library.pointers["settings/configuration/list"]:get()[1][1] if selected_config then writefile("floyd/configs/" .. selected_config .. ".txt", Window:GetConfig()) end end}}})
            config_section:Button( {name = "refresh", callback = function() update_config_list() end})
            update_config_list()
        end
    end
